* magit
** TODO Notes from the magit [[http://zagadka.vm.bytemark.co.uk/magit/magit.html][manual]]
   + magit buffers are structured into sections
   + TAB key controls visibility of sections
   + 1,2,3,4 controls the visibility of current section based on levels
   + M-1,M-2,M-3,M-4 controls visibility of all sections
   + M-h(hide) and M-H(hide all) are mnemonics for 2 and M-2
   + M-s and M-S are mnemonics for 4 and M-4
   + magit-status on an untracked directory will ask whether to create one
   + status buffer needs to be explicitly refreshed if changes are made to the repository outside of Emacs, g will do so
   + ignore an untracked file using i, this will add the filename to .gitignore
   + C-u i takes a directory name and adds that to .gitignore; useful for ignoring whole directories
   + 'I' command is similar to 'i' but will add the file to .git/info/exclude
   + k deletes an untracked file forever
   + if point is at untracked files section title, k will delete *all* untracked files
   + use 's' to move unstaged file into staging area, 'S' to stage all files
   + 'u' to unstage file, 'U' to unstage all files
   + 'k' to discard uncommitted changes(deletes the uncommitted file)
   + 'c' to pop up a buffer where a commit message can be written, C-c C-c to commit
   + C-c C-a in commit message buffer to indicate whether commit is an amend commit
   + C-c C-k to bury  *magit-log-edit* buffer
   + 'C' same as 'c' but also includes a change log
   + 'l' to show repository history of current head
   + prefix argument to 'l' will ask for starting and end point of history
   + 'L' will show log in a more verbose form
   + RET will pop up more information about current commit
   + 'a' will apply current commit to current branch but will not commit changes
   + 'A' will cherry-pick commit and will also commit changes when no conflicts
   + v will revert current commit
   + C-w will copy sha 1 of current commit into the kill ring
   + '.' will mark/unmark current commit
   + '=' will show differences between current commit and marked commit
   + C-u . will unmark marked commit regardless of point
   + h and H will browse the reflog(local history of changes made to repository heads)
   + 
* org
** article @http://doc.norang.ca/org-mode.html
   + what are org tags
   + clock in a task with C-c C-x C-i
   + 
** org 5 minute tutorial
   C-c C-o org-open-at-point
   C-c l org-store-link
   C-c C-l org-insert-link
   
** compact org-mode guide
*** Introduction
*** Document Structure
    + Org is implemented on top of outline mode
    + clean view can be used to minimize star usage in headings
    + S-tab and C-u tab invokes global cycling
    + C-u C-u C-u tab shows all, including drawers
    + on first visit to an org file, the global state is set to OVERVIEW; this setting is configurable
    + C-c C-u backward to higher level heading
    + M-S-ret inserts new todo entry with same level as current heading
    + <tab> cycles through reasonable levels
    + M-S-left/right promotes/demotes current heading by one level
    + M-S-up/down swaps with previous/next subtree of same level
    + C-c C-w refiles entry or region to different location      
    + C-x n s/w narrows buffer to current subtree/ widen it again
    + promotion and demotion works on all headlines in active region if there is one      
    + C-c / invokes org-sparse-tree which is useful for constructing pages with selected information in an outline tree
    + Plain lists
    + M-S-ret inserts new item with a checkbox
      * C-c C-c toggles state of checkbox
      * C-c - cycles entire list through the different itemize/enumerate bullets
      * M-S-left,right changes indentation of item, including subitems, leave out shift to change only on item
*** Tables
*** Tags
    + If a heading has a certain tag, all subheadings will inherit the tag as well
    + Set tags that will be inherited by all entries in a file using "#+FILETAGS: :tag1:tag2:tag3" 
    + C-c C-q enters new tags for current headline
    + Tag insertion is based on a list of tags
      * by default this is constructed dynamically containing all tags currently used in the buffer
      * globally specify a hard list of tags with the variable org-tag-alist
      * set default tags for a given file with lines like
	'#+TAGS: @work @home @tennisclub'
	'#+TAGS: laptop car pc sailboat'
    + C-c \ shows list of entries matching tag condition(eg +action+emacs-ruby)
    + C-u C-c \ to limit list of entries matching tag condition to only task headlines
    + C-c / m create sparse tree with all headlines matching a tags search
    + C-c a m creates a global list of tag matches from all agenda files
    + C-c a M creates a global list of tag matches from all agenda files, but check only TODO items and force checking subitems
*** Properties
    + properties are key-value paris associated with an entry
    + allowed values for a property can be set in two ways
      * defined at the top level heading by setting a property ':Xyz_ALL:' which is inherited
      * defined globally using org-global-properties
      * defined file-wide using #+PROPERTY: NDisks_ALL 1 2 3 4
    + C-c C-x p sets a property for current entry
    + C-c C-c d removes a property from current entry
    + create sparse trees and special lists with selection based on properties using same commands as that for tags

*** Other
    + C-c C-c activates any changes in the line
* ruby
** ruby quiz problem 1
*** techniques
    + get ascii value of a character in string "test".bytes.to_a[i]
    + 

** sinatra
*** Code of interest
    + warn(msg)
      Display the given message (followed by a newline) on STDERR unless warnings are disabled (for example with the -W0 flag).
    + Object.send :remove_const, :tilt
      + remove_const(sym)
	Removes the definition of the given constant, returning that constant's value. Predefined classes and singleton objects (such as true) cannot be removed.
    + @body = block if block_given?
      Returns true if yield would execute a block in the current context. The iterator? form is mildly deprecated.
    + body = [body] if body.respond_to? :to_str
      this seems to be acceptable coding
    + header["Content-Length"] = body.to_ary.inject(0) { |len, part| len + Rack::Utils.bytesize(part) }.to_s
      technique for accumulating the sum of an arrary after running a function on each element

** Libraries
*** thread
    thread support classes, part of stdlib
*** time
    part of stdlib
*** uri
    url parsing, part of stdlib
*** rack
    provides a minimal interface between webservers supporting Ruby and Ruby frameworks
*** tilt
    tilt is a thin interface over a bunch of different Ruby template engines
* conkeror browser
* rspec
** Executable code samples
   + describe() methods returns an ExampleGroup class, which contains a group of examples of particular behaviour of the ysstem that you wish to describe
   + it() method returns an instance of the ExampleGroup in which that example is run
   

    

** before() and after()
   Use before() and after() to define code that executes before and after each example or only once per ExampleGroup
   + before(:all) after(:all)
   + before(:each) after(:each)
   + :each is the default
** Helper methods
   write helper methods directly within an Example Group
** Reusable Helper methods
   include helper methods in multiple ExampleGroups by expressing them within a module and then including that module in your ExampleGroup
** Shared Example Groups
   1. Factor out shared behavior in an ExampleGroup
   2. Reference shared behavior using it_should_behave_like() method
** Pending Examples
   Three ways to mark an example as pending
   + Leave out the block
     it "should say foo"
   + Use the pending method with no block
     pending("get the vocal chords working")
   + Use the pending method with a block; output will say PENDING, example will fail with message FIXED as soon as body of block raises no errors
** Mocks and Stubs
*** Creating a mock object
    my_mock = mock(name) - creates a new mock with the given name(a string) and registers it.
    my_mock = mock(name,stubs) - as above, but sets a stub return value for specific messages
*** Message Expectations
    A message expectation(aka mock method) is an expectation that an object should receive a specific message during the execution of an example
**** Expecting Messages
      + my_mock.should_receive(:msg) - message argument is a symbol that is the name of a message that you want the mock to expect
      + my_mock.should_not_receive(:msg)
      + my_mock.should_receive(:msg).with(<args>) - eg .with(1,2,3)
      + my_mock.should_receive(:msg).once.with(<args>)
      + my_mock.should_receive(:msg).with(no_args()) - message is expected to be passed with no arguments
      + my_mock.should_receive(:msg).with(any_args()) - message is expected to be passed with any arguments, this is the default when with() clause is specified

	
      
      


**** Argument Constraints
